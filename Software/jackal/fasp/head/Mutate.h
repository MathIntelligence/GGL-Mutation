#ifndef _Mutate
#define _Mutate

class StrFmt;
class SegBed;
class Mutate
{
public:
Mutate();
Mutate(Mutate *);
int  isionbridge(Res *,Res *);
char getmodelresname(Res *);
Res **checkmodelburiedpolars(int,int);
void checkburiedpolars();
void putsegbedmean(SegBed *);
void refineminment();
void assembleallmean(Res *,Res *);
void initial();
void hooksidechain();
~Mutate(); 
void smoothmin();
void assembleflexold(Res *r1,Res *r2);
Res **finddsspsegment(Res *rr);
int *resetstemcomposite(int *);
int *findrightids(Mutate*,int *);
int* getdsspmark();
int  isfather(Mutate *);
void assemble(SegBed *,Mutate *,int *);
float *getrmsd(Mutate *,Res *,Res *);
void setownerdssp();
void buildhbond();
void setconsistentdssp();
void beforewritefinalout();
void writefinalout();
void  setlabel(Pdb *);
float *getpdboldtransfer(Res *t1, Res *t2);
void  refinement();
void  optimize();
void  setrotamerorder(int n);
int  calctotalinsert(int);
int  findbadsite(int *);
int  checkdloop(int);
void setnoclose(float **xyzout,int a,int b);
void resetsegbed(SegBed *);
void  setdloopstem(int,int *);
void unitesegbed(SegBed *);
void findrealstem(int,int *);
void actmutateloop(int);
void minshift(Res *rr,int nn);
void setrelydssp();
void sethbonddssp(int n);
void refinesmoothsec(Res *rr,int nn);
void refineminsec(Res *rr,int nn);
void refinesec(Res *rr,int nn);
void refinesmoothloop(Res *rr,int nn);
void refineminloop(Res *rr,int nn);
void refineloop(Res *rr,int nn);
void minwinrefine0(Res *rr,int nn);
void minwinrefine(Res *rr,int nn);
Res *getres(Res *);
Res *getmodelres(Res *);
int *getresstem(int nsite);
int getonlymaxrmsd(float *,int,int);
void sethbonddssp(int,int);
void sethbonddssp();
int findresid(Res *);
Res *findresid(int);
int *findnewseg(Res *,Res *,Res *,Res*,int);
int *findnewseg(Res *,Res *,Res *,int);
void reindex(Pdb *);
void segexcludesuperimpose(Res *t1,Res *t2,Res *r1,Res *r2);
int *getmaxrmsd(float *rms,int n1,int n2);
void combineold();
void combine();
void algnsegment(int *);
void setrightids();
void assembleall(Res *,Res *);
void assemble0(Res *,Res *);
void assemble(Res *,Res *);
void assembleflex(Res *,Res *);
void assemble0(Mutate *,Res *,Res *);
int  assemblemean(Mutate *,Res *,Res *);
int  assemble(Mutate *,Res *,Res *);
float *getavgrmsd(Res *,Res *);
float *getassemble(Mutate *,Res *,Res *);
int *findresidstems(int,int);
int uniquestrstr(char *,char *); 
int handlecomposite(int *stem);
int *getseqnstem(Mutate *,Res *,Res *);
int *getcompositestem(int);
int *getnewstem(int *);
void reindex();
void setsegbed(SegBed *,int *);
void putsegbed(SegBed *);
int isbreak(int);
int *findsegbed(SegBed *,int);
int *findloosesegment(Res *,Res *,int);
void setlocaldssp();
void setnewunchanged();
void setunchanged();
float minimizeold(Res *,int,float);
float minimize(float);
float minimize(Res *,int,float);
void minimize0(Res *,int,float);
Res **findchanged(Res *,Res **);
Res **getlist(Res *,int);
Res **getlist();
void minsc();
void minwindowloop(Res *rr,int nn);
void minloop(Res *rr,int nn);
void minbadsidechain(Res *rr,int nn,int ff);
void minsidechain(Res *rr,int nn);
void minsidechain0();
void updatepdbold();
void updatepdbcopy();
void printoutdistance();
Res *findminscore(int*,Res *rr,int nn);
Res *findminscore(Res *rr,int nn);
Res **findminsegment(Res *);
Res *findsegmaxclash(Res *,int);
int calcnewres(Res *s,int n);
int calcinsert(Res *,int);
int calcdelete(Res *,int);
int calcinsert();
int calcinsert(Res **);
Res ** reordertmp(Res **);
void setreson(Res **);
void setboundscore();
int getlength(int);
float clash(Atm *,Atm *);
Atm *findclash(Res *,Res *);
void minsegment(Res *,Res *);
void setcontact(Res *r1,int);
void setseqnres();
int  getreslength(int *);
int *checkreslength(int *);
void setlocaldssp(int*);
void fullsidechain(int n);
void linkstructureviaboth(Res **);
int findbadsite(int,int);
int tunebadsite(int);
int findbadsite();
Res *findhelixend(Res *,int);
int findloose(Res *,Res *);
int *actallhelix(int *);
void printalign(FILE *,int *);
void printalign(char *,int *);
void printalign(char *);
Res *getmidresidue(Res *,Res *);
Res *getmidresidue(int *);
int *findloosesegment(int *);
int findmidresidue(Res *,Res *);
int findmidresidue(int *);
void delsidechain(int *);
void delsidechain(Res **);
int  tunebadsegment(int mm);
void printsegment(FILE *,int *);
void printsegment(int *);
void printsegment(Res **);
void setchiangle(int *);
void actmutate0();
void actmutate();
void linkstructure(Res **);
void linkstructure(int);
int  findloose(Res *,Res *,int);
int *findloosesegment(int,Res *,Res *);
int *findloosesegment0(Res *,Res *,int);
int *getsegmentworkon(Res **,int);
int *findsegmentworkon(int);
Res **setinitialstructure(int,int);
void createinitialstructure(int);
void linkinitialstructure(int);
int *getsegmentworkon(int);
int  actsinglemutation(Res *,char,float);
void actsinglemutation(Res *);
int  actsidechainmutation(float );
int  findbadsegment();
int *findbadsegment(int n,int tt);
void setnearreliable();
//
void delsidechain(int);
void domutate();
void setmatch();
void setdssp();
void setdssp(int);
void setreliable();
void setreliable(Res **);
void delsidechain();

int  findlongestreliable(Res *);
int  findminuslongestreliable(Res *);
void zipgappedstructure();
void fixgappedstructure();
void linkgappedstructure();
void linkinitialstructure();
void doeditloop(int);
void doeditresidue();
void doeditresidue(int);
void createinitialstructure();
void dosidechainmutation(int);
void dooutlierinsertion();
int *findlooptoworkon();
int *findloopselftoworkon();
int *findhelixtoworkon();
char *getsecondary();
void dooutlierdeletion();
void inserthead(char *outer);
void appendtail(char *outer);

//data member
int     insert;
int      flag;
char    *seqn;
int     *resid;
Pdb     *pdbold;
Pdb     *pdbcopy;
Pdb     *mpdb; 
char    *sqnto; //seqngap
Res    **resn;  //residue table
int     *match; //from seqngap to seqn
int     *compare; //from seqn to seqngap
int      refine; //0-9, modeling; 10-90, composite; 100-900, loopy; 1000-9000, refine;
int     *rely; //mutated,inserted,deleted,no change
float   *boundscore;
char    *dssp; //2d table;
Segen   *segen;
StrFmt  *owner;
Mutate  *mold;
Mutate  *next;
float   *xyzself;
int      autotmp; //composite automatic
int      autoalgn;
int      stepnum;
int      window;
int      fapr;
int      aloop;
int      test;  
int      sharp;
int      out;
int      asloop; //using extensive searching for conformation
float    rmsd;
char    *code;
int      seglen;
int      refineid;
int      restraint;
};
#endif
